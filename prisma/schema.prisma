// npx prisma migrate dev --name init
// npx prisma generate

// LOCAL_DATABASE_URL
// EXTERNAL_DATABASE_URL
// LOCAL_TEST_DATABASE_URL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("LOCAL_TEST_DATABASE_URL")
}

// location
model Province {
  id    Int    @id @default(autoincrement()) @db.SmallInt
  title String @db.VarChar(30)
  users User[]
  jobs  Job[]
}

// category
model Category {
  id       Int       @id @default(autoincrement()) @db.SmallInt
  title    String    @db.VarChar(30)
  users    User[]
  contents Content[]
}

//user
model User {
  id              Int      @id @default(autoincrement())
  slug            String   @default(uuid())
  username        String   @unique @db.VarChar(30)
  email           String   @unique @db.VarChar(70)
  password        String   @db.VarChar(30)
  firstName       String?  @db.VarChar(30)
  lastName        String?  @db.VarChar(30)
  phone           String?  @unique @db.VarChar(11)
  permissionLevel Int      @default(0) @db.SmallInt
  createdAt       DateTime @default(now()) @db.Date

  isActive Boolean @default(false)
  isDelete Boolean @default(false)

  provinceId    Int?           @db.SmallInt
  province      Province?      @relation(fields: [provinceId], references: [id])
  interests     Category[]
  keywords      Keyword[]
  teams         Team[]
  contents      Content[]
  likes         Like[]
  comments      Comment[]
  reports       Report[]
  adminMessages AdminMessage[]
}

// TODO implement
model AdminMessage {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(30)
  description String
  isActive    Boolean  @default(true)
  isReaded    Boolean  @default(false)
  createdAt   DateTime @default(now()) @db.Date
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
}

//team

model Team {
  id             Int      @id @default(autoincrement())
  title          String   @unique
  description    String
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now()) @db.Date
  managerId      Int
  manager        User     @relation(fields: [managerId], references: [id])
  contactMethods String[]
  jobs           Job[]
}

enum WageType {
  FIXED
  PARTNERSHIP
  AGREEMENT
}

model Job {
  id           Int       @id @default(autoincrement())
  title        String
  description  String
  createdAt    DateTime  @default(now()) @db.Date
  updatedAt    DateTime  @updatedAt
  isActive     Boolean   @default(true)
  wageType     WageType
  wage         Int?
  provinceId   Int?      @db.SmallInt
  province     Province? @relation(fields: [provinceId], references: [id])
  benefits     String[]
  requirements String[]

  teamId Int
  team   Team @relation(fields: [teamId], references: [id])

  @@index([teamId])
}

// contents
model Keyword {
  id       Int       @id @default(autoincrement())
  title    String    @unique @db.VarChar(30)
  authorId Int
  author   User      @relation(fields: [authorId], references: [id])
  contents Content[]
}

model Content {
  id          Int      @id @default(autoincrement())
  title       String   @unique @db.VarChar(100)
  description String
  // TODO quil
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now()) @db.Date
  updatedAt   DateTime @updatedAt

  // author
  authorId Int
  author   User @relation(fields: [authorId], references: [id])

  // category
  categoryId Int      @db.SmallInt
  category   Category @relation(fields: [categoryId], references: [id])

  course   Course?
  lesson   Lesson?
  post     Post?
  comments Comment[]
  reports  Report[]
  likes    Like[]
  keywords Keyword[]

  // TODO shop info
  // price       Int?
  // buyers       user[]          @relation(name: "PurchasedCourses")

  @@index([authorId])
  @@index([categoryId])
  @@index([isActive])
  @@index([isActive, id])
}

model Course {
  id      Int      @id @default(autoincrement())
  lessons Lesson[]

  // content
  contentId Int     @unique
  content   Content @relation(fields: [contentId], references: [id])

  @@index([contentId])
}

model Lesson {
  id       Int    @id @default(autoincrement())
  videoUrl String

  // course
  courseId Int    @unique
  course   Course @relation(fields: [courseId], references: [id])

  // content
  contentId Int     @unique
  content   Content @relation(fields: [contentId], references: [id])

  @@index([contentId])
  @@index([courseId])
}

model Post {
  id Int @id @default(autoincrement())

  // content
  contentId Int     @unique
  content   Content @relation(fields: [contentId], references: [id])

  @@index([contentId])
}

// content act
model Comment {
  id          Int      @id @default(autoincrement())
  description String
  createdAt   DateTime @default(now()) @db.Date
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)

  contentId Int
  content   Content @relation(fields: [contentId], references: [id])

  authorId Int
  author   User @relation(fields: [authorId], references: [id])

  @@index([contentId])
  @@index([contentId, authorId])
}

model Report {
  id          Int      @id @default(autoincrement())
  description String
  createdAt   DateTime @default(now()) @db.Date

  contentId Int
  content   Content @relation(fields: [contentId], references: [id])

  authorId Int
  author   User @relation(fields: [authorId], references: [id])

  @@index([contentId])
  @@index([contentId, authorId])
}

model Like {
  contentId Int
  content   Content @relation(fields: [contentId], references: [id])

  authorId Int
  author   User @relation(fields: [authorId], references: [id])

  @@id([contentId, authorId])
}
