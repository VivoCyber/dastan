// npx prisma migrate dev --name init
// npx prisma generate

// LOCAL_DATABASE_URL
// EXTERNAL_DATABASE_URL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("LOCAL_DATABASE_URL")
}

// location
model province {
  id    Int    @id @default(autoincrement()) @db.SmallInt
  title String @db.VarChar(30)
  user  user[]
  job   job[]
}

// category
model category {
  id     Int      @id @default(autoincrement()) @db.SmallInt
  title  String   @db.VarChar(30)
  user   user[]
  course course[]
  post   post[]
}

//user
model user {
  id              Int            @id @default(autoincrement())
  slug            String         @default(uuid())
  username        String         @unique @db.VarChar(30)
  email           String         @unique @db.VarChar(70)
  password        String         @db.VarChar(30)
  firstName       String?        @db.VarChar(30)
  lastName        String?        @db.VarChar(30)
  phone           String?        @unique @db.VarChar(11)
  permissionLevel Int            @default(0) @db.SmallInt
  createdAt       DateTime       @default(now()) @db.Date
  isActive        Boolean        @default(false)
  isDelete        Boolean        @default(false)
  provinceId      Int?           @db.SmallInt
  province        province?      @relation(fields: [provinceId], references: [id])
  interests       category[]
  keyword         keyword[]
  Team            team[]
  course          course[]
  comment         comment[]
  report          report[]
  adminMessage    adminMessage[]
  post            post[]
  like            like[]
}

// TODO implement
model adminMessage {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(30)
  description String
  isActive    Boolean  @default(true)
  isReaded    Boolean  @default(false)
  createdAt   DateTime @default(now()) @db.Date
  updatedAt   DateTime @updatedAt
  userId      Int
  user        user     @relation(fields: [userId], references: [id])
}

//team

model team {
  id             Int      @id @default(autoincrement())
  title          String   @unique
  description    String
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now()) @db.Date
  managerId      Int
  manager        user     @relation(fields: [managerId], references: [id])
  contactMethods String[]
  Jobs           job[]
}

enum WageType {
  FIXED
  PARTNERSHIP
  AGREEMENT
}

model job {
  id           Int       @id @default(autoincrement())
  title        String
  description  String
  createdAt    DateTime  @default(now()) @db.Date
  updatedAt    DateTime  @updatedAt
  isActive     Boolean   @default(true)
  wageType     WageType
  wage         Int?
  provinceId   Int?      @db.SmallInt
  province     province? @relation(fields: [provinceId], references: [id])
  benefits     String[]
  requirements String[]
  team         team      @relation(fields: [teamId], references: [id])
  teamId       Int
}

// contents
// TODO

model keyword {
  id       Int       @id @default(autoincrement())
  title    String    @unique @db.VarChar(30)
  authorId Int
  author   user      @relation(fields: [authorId], references: [id])
  content  content[]
}

model content {
  id      String    @id @default(uuid())
  course  course?
  lesson  lesson?
  post    post?
  comment comment[]
  report  report[]
  like    like[]
  keyword keyword[]
}

model course {
  id          Int      @id @default(autoincrement())
  title       String   @unique @db.VarChar(30)
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now()) @db.Date
  updatedAt   DateTime @updatedAt

  // lesson
  lesson lesson[]

  // author
  authorId Int
  author   user @relation(fields: [authorId], references: [id])

  // category
  categoryId Int      @db.SmallInt
  category   category @relation(fields: [categoryId], references: [id])

  // content
  contentId String  @unique
  content   content @relation(fields: [contentId], references: [id])

  // TODO shop info
  // price       Int?
  // buyers       user[]          @relation(name: "PurchasedCourses")
}

model lesson {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(30)
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now()) @db.Date
  updatedAt   DateTime @updatedAt
  videoUrl    String
  attached    String[]

  // course
  courseId Int
  course   course @relation(fields: [courseId], references: [id])

  // content
  contentId String  @unique
  content   content @relation(fields: [contentId], references: [id])
}

model paragraph {
  id      Int    @id @default(autoincrement())
  heading String
  text    String

  // post
  postId Int?
  post   post? @relation(fields: [postId], references: [id])
}

model post {
  id          Int      @id @default(autoincrement())
  title       String   @unique @db.VarChar(30)
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now()) @db.Date
  updatedAt   DateTime @updatedAt

  // paragraphs
  paragraph paragraph[]

  // author
  authorId Int
  author   user @relation(fields: [authorId], references: [id])

  // category
  categoryId Int      @db.SmallInt
  category   category @relation(fields: [categoryId], references: [id])

  // content
  contentId String  @unique
  content   content @relation(fields: [contentId], references: [id])
}

// content act
model comment {
  id          Int      @id @default(autoincrement())
  description String
  createdAt   DateTime @default(now()) @db.Date
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)

  contentId String
  content   content @relation(fields: [contentId], references: [id])

  authorId Int
  author   user @relation(fields: [authorId], references: [id])
}

model report {
  id          Int      @id @default(autoincrement())
  description String
  createdAt   DateTime @default(now()) @db.Date
  isActive    Boolean  @default(true)

  contentId String
  content   content @relation(fields: [contentId], references: [id])

  authorId Int
  author   user @relation(fields: [authorId], references: [id])
}

enum LikeType {
  NONE
  LIKE
  DISLIKE
}

model like {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt
  state     LikeType

  contentId String
  content   content @relation(fields: [contentId], references: [id])

  authorId Int
  author   user @relation(fields: [authorId], references: [id])
}
